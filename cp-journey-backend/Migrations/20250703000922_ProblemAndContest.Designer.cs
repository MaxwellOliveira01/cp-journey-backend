// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cp_journey_backend.Repositories;

#nullable disable

namespace cp_journey_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250703000922_ProblemAndContest")]
    partial class ProblemAndContest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("cp_journey_backend.Entities.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LocalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.EventParticipation", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("EventParticipations");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Local", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locals");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SetterId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("StatementPdf")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("SetterId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.University", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Contest", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.Local", "Local")
                        .WithMany("Contests")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Local");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Event", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.Local", "Local")
                        .WithMany("Events")
                        .HasForeignKey("LocalId");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.EventParticipation", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.Event", null)
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cp_journey_backend.Entities.Person", null)
                        .WithMany("Events")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Person", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId");

                    b.Navigation("University");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Problem", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.Contest", "Contest")
                        .WithMany("Problems")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cp_journey_backend.Entities.Person", "Setter")
                        .WithMany()
                        .HasForeignKey("SetterId");

                    b.Navigation("Contest");

                    b.Navigation("Setter");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Team", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId");

                    b.Navigation("University");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.TeamMember", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.Person", "Person")
                        .WithMany("Teams")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cp_journey_backend.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.University", b =>
                {
                    b.HasOne("cp_journey_backend.Entities.Local", "Local")
                        .WithMany("Universities")
                        .HasForeignKey("LocalId");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Contest", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Local", b =>
                {
                    b.Navigation("Contests");

                    b.Navigation("Events");

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Person", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("cp_journey_backend.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
