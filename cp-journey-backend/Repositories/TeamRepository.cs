using cp_journey_backend.Entities;
using cp_journey_backend.Services;
using Microsoft.EntityFrameworkCore;

namespace cp_journey_backend.Repositories;

public interface ITeamRepository : IDefaultRepository<Team> {
    
    Task<List<Team>> ListByUserAsync(int userId);

    Task<List<Team>> ListByUniversityAsync(int universityId);
    
}

public class TeamRepository(AppDbContext appDbContext) : ITeamRepository {

    public async Task<Team?> GetAsync(int id) {
        const string sql = "SELECT * FROM \"Teams\" WHERE \"Id\" = {0}";
        return await appDbContext.Teams.FromSqlRaw(sql, id).FirstOrDefaultAsync();
    }

    public async Task<Team> GetRequiredAsync(int id)
        => await GetAsync(id) ?? throw new KeyNotFoundException($"Team with ID {id} not found."); 

    public async Task AddAsync(Team team) { 
        // The entity id is generated by the database
        // And when using rawsql to insert this entry, we dont know the id yet
        // and the query doesnt return it!
        // So we need to use the EF core to handle that
        // EF Core will automatically insert the new entity and put the new id on entity.Id
        await appDbContext.Teams.AddAsync(team);
        await appDbContext.SaveChangesAsync();
    }

    public Task DeleteAsync(Team team) {
        const string sql = "DELETE FROM \"Teams\" WHERE \"Id\" = {0}";
        return appDbContext.Database.ExecuteSqlRawAsync(sql, team.Id);
    }

    public Task<List<Team>> ListAsync() {
        const string sql = "SELECT * FROM \"Teams\"";
        return appDbContext.Teams.FromSqlRaw(sql).ToListAsync();
    }

    public async Task UpdateAsync(Team team) {
        const string sql = "UPDATE \"Teams\" SET \"UniversityId\" = {1} WHERE \"Id\" = {0}";
        await appDbContext.Database.ExecuteSqlRawAsync(sql, team.Id, team.UniversityId);
        
        const string deleteMembersSql = "DELETE FROM \"TeamMembers\" WHERE \"TeamId\" = {0}";
        await appDbContext.Database.ExecuteSqlRawAsync(deleteMembersSql, team.Id);
        
        foreach (var member in team.Members) {
            const string memberSql = "INSERT INTO \"TeamMembers\" (\"TeamId\", \"PersonId\") VALUES ({0}, {1})";
            await appDbContext.Database.ExecuteSqlRawAsync(memberSql, team.Id, member.PersonId);
        }
    }
    
    public async Task<List<Team>> ListByUserAsync(int userId) {
        const string sql = "SELECT t.* FROM \"Teams\" t " +
                           "JOIN \"TeamMembers\" tm ON t.\"Id\" = tm.\"TeamId\" " +
                           "WHERE tm.\"PersonId\" = {0}";
        return await appDbContext.Teams.FromSqlRaw(sql, userId).ToListAsync();
    }
    
    public async Task<List<Team>> ListByUniversityAsync(int universityId) {
        const string sql = "SELECT * FROM \"Teams\" WHERE \"UniversityId\" = {0}";
        return await appDbContext.Teams.FromSqlRaw(sql, universityId).ToListAsync();
    }
    
}