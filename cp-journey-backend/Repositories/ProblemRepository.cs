using cp_journey_backend.Entities;
using Microsoft.EntityFrameworkCore;

namespace cp_journey_backend.Repositories;

public interface IProblemRepository : IDefaultRepository<Problem> {
    
    Task<List<Problem>> ListByContestAsync(int contestId);
    
    Task<List<Problem>> ListBySetterAsync(int setterId);
    
}

public class ProblemRepository(AppDbContext appDbContext) : IProblemRepository {
    
    public async Task<Problem?> GetAsync(int id) {
        const string sql = "SELECT * FROM \"Problems\" WHERE \"Id\" = {0}";
        return await appDbContext.Problems.FromSqlRaw(sql, id).FirstOrDefaultAsync();
    }

    public async Task AddAsync(Problem entity) {
        // The entity id is generated by the database
        // And when using rawsql to insert this entry, we dont know the id yet
        // and the query doesnt return it!
        // So we need to use the EF core to handle that
        // EF Core will automatically insert the new entity and put the new id on entity.Id
        await appDbContext.Problems.AddAsync(entity);
        await appDbContext.SaveChangesAsync();
    }

    public Task DeleteAsync(Problem entity) {
        const string sql = "DELETE FROM \"Problems\" WHERE \"Id\" = {0}";
        return appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id);
    }

    public Task<List<Problem>> ListAsync() {
        const string sql = "SELECT * FROM \"Problems\"";
        return appDbContext.Problems.FromSqlRaw(sql).ToListAsync();
    }

    public Task UpdateAsync(Problem entity) {
        const string sql = "UPDATE \"Problems\" SET \"Name\" = {1}, \"Label\" = {2}, \"Order\" = {3}, " +
                           "\"ContestId\" = {4}, \"SetterId\" = {5} WHERE \"Id\" = {0}";
        
        return appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id, entity.Name, entity.Label,
            entity.Order, entity.ContestId, entity.SetterId);
    }

    public Task<List<Problem>> ListByContestAsync(int contestId) {
        const string sql = "SELECT * FROM \"Problems\" WHERE \"ContestId\" = {0}";
        return appDbContext.Problems.FromSqlRaw(sql, contestId).ToListAsync();
    }

    public Task<List<Problem>> ListBySetterAsync(int setterId) {
        const string sql = "SELECT * FROM \"Problems\" WHERE \"SetterId\" = {0}";
        return appDbContext.Problems.FromSqlRaw(sql, setterId).ToListAsync();
    }
}