using cp_journey_backend.Entities;
using Microsoft.EntityFrameworkCore;

namespace cp_journey_backend.Repositories;

public interface IPersonRepository : IDefaultRepository<Person> {

    Task<List<Person>> FilterAsync(string? prefix, int? universityId);
    
    Task<List<Person>> ListByUniversityAsync(int universityId);

    Task<List<Person>> ListByEventAsync(int eventId);

    Task<List<Person>> ListByTeamAsync(int teamId);

}

public class PersonRepository(AppDbContext appDbContext) : IPersonRepository {

    public async Task<Person?> GetAsync(int id) {
        const string sql = "SELECT * FROM \"Persons\" WHERE \"Id\" = {0}";
        return await appDbContext.Persons.FromSqlRaw(sql, id).FirstOrDefaultAsync();
    }
    
    public async Task AddAsync(Person entity) {        
        // The entity id is generated by the database
        // And when using rawsql to insert this entry, we dont know the id yet
        // and the query doesnt return it!
        // So we need to use the EF core to handle that
        // EF Core will automatically insert the new entity and put the new id on entity.Id
        await appDbContext.Persons.AddAsync(entity);
        await appDbContext.SaveChangesAsync();
    }

    public async Task DeleteAsync(Person entity) {
        const string sql = "DELETE FROM \"Persons\" WHERE \"Id\" = {0}";
        await appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id);
    }

    public async Task<List<Person>> ListAsync() {
        const string sql = "SELECT * FROM \"Persons\"";
        return await appDbContext.Persons.FromSqlRaw(sql).ToListAsync();
    }

    public async Task UpdateAsync(Person entity) {
        const string sql = "UPDATE \"Persons\" SET \"Name\" = {1}, \"Handle\" = {2}, \"UniversityId\" = {3} WHERE \"Id\" = {0}";
        await appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id, entity.Name, entity.Handle, entity.UniversityId);
    }

    public async Task<List<Person>> ListByUniversityAsync(int universityId) {
        const string sql = "SELECT * FROM \"Persons\" WHERE \"UniversityId\" = {0}";
        return await appDbContext.Persons.FromSqlRaw(sql, universityId).ToListAsync();
    }

    public async Task<List<Person>> ListByEventAsync(int eventId) {
        const string sql = @"
            SELECT p.*
            FROM ""Persons"" p
            JOIN ""EventParticipations"" ep ON p.""Id"" = ep.""PersonId""
            WHERE ep.""EventId"" = {0}";
        return await appDbContext.Persons.FromSqlRaw(sql, eventId).ToListAsync();
    }

    public async Task<List<Person>> ListByTeamAsync(int teamId) {
        const string sql = @"
            SELECT p.*
            FROM ""Persons"" p
            JOIN ""TeamMembers"" tm ON p.""Id"" = tm.""PersonId""
            WHERE tm.""TeamId"" = {0}";
        return await appDbContext.Persons.FromSqlRaw(sql, teamId).ToListAsync();
    }
    
    public async Task<List<Person>> FilterAsync(string? prefix, int? universityId) {
        var sql = "SELECT * FROM \"Persons\"";
        var conditions = new List<string>();
            var parameters = new List<object>();

        if (!string.IsNullOrEmpty(prefix)) {
            conditions.Add("(LOWER(\"Name\") LIKE LOWER({0}) OR LOWER(\"Handle\") LIKE LOWER({1}))");
            parameters.Add($"%{prefix}%");
            parameters.Add($"%{prefix}%");
        }

        if (universityId.HasValue) {
            if (parameters.Count == 0) {
                conditions.Add("\"UniversityId\" = {0}");
            } else {
              conditions.Add("\"UniversityId\" = {2}");  
            }
            parameters.Add(universityId.Value);
        }

        if (conditions.Count > 0) {
            sql += " WHERE " + string.Join(" AND ", conditions);
        }

        return await appDbContext.Persons.FromSqlRaw(sql, parameters.ToArray()).ToListAsync();
    }

}