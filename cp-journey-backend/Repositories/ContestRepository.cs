using cp_journey_backend.Entities;
using Microsoft.EntityFrameworkCore;

namespace cp_journey_backend.Repositories;

public interface IContestRepository : IDefaultRepository<Contest> {
    
    Task<List<Contest>> FilterAsync(string? nameFilter);
    
}

public class ContestRepository(AppDbContext appDbContext) : IContestRepository {
    public async Task<Contest?> GetAsync(int id) {
        const string sql = "SELECT * FROM \"Contests\" WHERE \"Id\" = {0}";
        return await appDbContext.Contests.FromSqlRaw(sql, id).FirstOrDefaultAsync();
    }

    public async Task AddAsync(Contest entity) {
        // The entity id is generated by the database
        // And when using rawsql to insert this entry, we dont know the id yet
        // and the query doesnt return it!
        // So we need to use the EF core to handle that
        // EF Core will automatically insert the new entity and put the new id on entity.Id
        await appDbContext.Contests.AddAsync(entity);
        await appDbContext.SaveChangesAsync();
    }

    public Task DeleteAsync(Contest entity) {
        const string sql = "DELETE FROM \"Contests\" WHERE \"Id\" = {0}";
        return appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id);
    }

    public Task<List<Contest>> ListAsync() {
        const string sql = "SELECT * FROM \"Contests\"";
        return appDbContext.Contests.FromSqlRaw(sql).ToListAsync();
    }

    public Task UpdateAsync(Contest entity) {
        const string sql = "UPDATE \"Contests\" SET \"Name\" = {1}, \"SiteUrl\" = {2}, \"StartDate\" = {3}, \"EndDate\" = {4}, \"LocalId\" = {5} " +
                           "WHERE \"Id\" = {0}";
        return appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id, entity.Name, entity.SiteUrl, entity.StartDate,
            entity.EndDate, entity.LocalId);
    }
    
    public async Task<List<Contest>> FilterAsync(string? nameFilter) {
        if (string.IsNullOrEmpty(nameFilter)) {
            return await ListAsync();
        }
        
        const string sql = "SELECT * FROM \"Contests\" WHERE LOWER(\"Name\") LIKE {0}";
        return await appDbContext.Contests.FromSqlRaw(sql, $"%{nameFilter}%").ToListAsync();
    }
    
    
}