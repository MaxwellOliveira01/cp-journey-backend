using cp_journey_backend.Entities;
using Microsoft.EntityFrameworkCore;

namespace cp_journey_backend.Repositories;

public interface IUniversityRepository : IDefaultRepository<University> {
    
}

public class UniversityRepository(AppDbContext appDbContext) : IUniversityRepository {
    
    public async Task AddAsync(University entity) {
        // The entity id is generated by the database
        // And when using rawsql to insert this entry, we dont know the id yet
        // and the query doesnt return it!
        // So we need to use the EF core to handle that
        // EF Core will automatically insert the new entity and put the new id on entity.Id
        await appDbContext.Universities.AddAsync(entity);
        await appDbContext.SaveChangesAsync();
    }

    public Task DeleteAsync(University entity) {
        var sql = "DELETE FROM \"Universities\" WHERE \"Id\" = {0}";
        return appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id);
    }

    public async Task<University?> GetAsync(int id) {
        var sql = "SELECT * FROM \"Universities\" WHERE \"Id\" = {0}";
        return await appDbContext.Universities.FromSqlRaw(sql, id).FirstOrDefaultAsync();
    }

    public async Task<University> GetRequiredAsync(int id) {
        var university = await GetAsync(id);
        if (university == null) {
            throw new KeyNotFoundException($"University with ID {id} not found.");
        }
        return university;
    }
    
    public async Task UpdateAsync(University entity) {
        const string sql = "UPDATE \"Universities\" SET \"Name\" = {1}, \"Alias\" = {2}, \"LocalId\" = {3} WHERE \"Id\" = {0}";
        await appDbContext.Database.ExecuteSqlRawAsync(sql, entity.Id, entity.Name, entity.Alias, entity.LocalId);
    }
    
    public async Task<List<University>> ListAsync() {
        const string sql = "SELECT * FROM \"Universities\"";
        return await appDbContext.Universities.FromSqlRaw(sql).ToListAsync();
    }

}